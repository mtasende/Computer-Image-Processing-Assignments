function [p1,p2,n]=lut(v)

%Esta es la Look Up Table. No tiene inteligencia. Para diferenciar casos
%ambiguos hay que hacerlo por afuera. Trabaja con valores 0 y 1.

ind = v * [8 4 2 1]'; %Paso de binario a decimal

% n representa la cantidad de bordes que hay en la celda (columna 9). Puede ser 0, 1,
% 2. p1 y p2 son los vértices del primer borde. Únicamente si n=2 es que 
% tienen sentido p3 y p4 (vértices del segundo borde).
% Los valores "ant" y "pos" identifican la arista del cuadrado en que se
% encuentra p1, p2, p3 o p4 (son las coordenadas (i,j) de los vértices de 
% ese cuadrado que son extremos del segmento donde se encuentra pi)

% tabla = [i_p1_ant j_p1_ant i_p1_pos j_p1_pos i_p2_ant j_p2_ant i_p2_pos j_p2_pos
% n i_p3_ant j_p3_ant i_p3_pos j_p3_pos i_p4_ant j_p4_ant i_p4_pos
% j_p4_pos]

tabla = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
         0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0;
         1 0 1 1 1 1 0 1 1 0 0 0 0 0 0 0 0;
         0 0 1 0 1 1 0 1 1 0 0 0 0 0 0 0 0;
         0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0;
         0 0 1 0 0 0 0 1 2 1 0 1 1 1 1 0 1;
         0 0 0 1 1 0 1 1 1 0 0 0 0 0 0 0 0;
         0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0;
         0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0;
         0 0 0 1 1 0 1 1 1 0 0 0 0 0 0 0 0;
         0 0 1 0 1 0 1 1 2 0 0 0 1 0 1 1 1;
         0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0;
         0 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0;
         1 0 1 1 1 1 0 1 1 0 0 0 0 0 0 0 0;
         0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0;
         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    ];

    p1(1,:) = tabla(ind,1:4);
    p2(1,:) = tabla(ind,5:8);
    n = tabla(ind,9);
    
    if(n==2)
        p1(2,:) = tabla(ind,10:13);
        p2(2,:) = tabla(ind,14:17);
    end


% switch(ind)
%     case 0
%         %disp('hola 0')
%         p1 = [0 0 0 0];
%         p2 = [0 0 0 0];
%         n = 0;
%     case 1
%         %disp('hola 1')
%         p1 = [0 0 1 0];
%         p2 = [1 0 1 1];
%         n = 1;
%     case 2
%         %disp('hola 2')
%         p1 = [1 0 1 1];
%         p2 = [1 1 0 1];
%         n = 1;
%     case 3
%         %disp('hola 3')
%         p1 = [0 0 1 0];
%         p2 = [1 1 0 1];
%         n = 1;
%     case 4
%         %disp('hola 4')
%         p1 = [0 0 0 1];
%         p2 = [0 1 1 1];
%         n = 1;
%     case 5
%         %disp('hola 5')
%         p1 = [0 0 1 0; 1 0 1 1];
%         p2 = [0 0 0 1; 1 1 0 1];
%         n = 2;
%     case 6
%         %disp('hola 6')
%         p1 = [0 0 0 1];
%         p2 = [1 0 1 1];
%         n = 1;
%     case 7
%         %disp('hola 7')
%         p1 = [];
%         p2 = [];
%         n = ;
%     case 8
%         %disp('hola 8')
%         p1 = [];
%         p2 = [];
%         n = ;
%     case 9
%         %disp('hola 9')
%         p1 = [];
%         p2 = [];
%         n = ;
%     case 10
%         %disp('hola 10')
%         p1 = [];
%         p2 = [];
%         n = ;
%     case 11
%         %disp('hola 11')
%         p1 = [];
%         p2 = [];
%         n = ;
%     case 12
%         %disp('hola 12')
%         p1 = [];
%         p2 = [];
%         n = ;
%     case 13
%         %disp('hola 13')
%         p1 = [];
%         p2 = [];
%         n = ;
%     case 14
%         %disp('hola 14')
%         p1 = [];
%         p2 = [];
%         n = ;
%     case 15
%         %disp('hola 15')
%         p1 = [];
%         p2 = [];
%         n = ;
% end

